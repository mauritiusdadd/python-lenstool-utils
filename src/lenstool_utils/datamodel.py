#!/usr/bin/env python
"""Module that contain the classes to handle the lenstool Data Model."""
import os
import json
import warnings
from astropy import units
from astropy.coordinates import SkyCoord


_ROOT = os.path.abspath(os.path.dirname(__file__))
LENSTOOL_DATAMODEL_DBASE = os.path.join(_ROOT, 'data_model.json')


class LenstoolFirstIdentifier:
    """Object for a 'first identifier' section in a lenstool par-file."""

    def __init__(self, name, dm_data, index=None):
        self.name = name
        self.index = index
        self.parameters = {}
        self.param_fields = {}

        self.__init_from_datamodel(dm_data)

    def __repr__(self):
        """Return repr string."""
        return f"{self.name}"

    def __str__(self):
        """Return lesntool par-file text data."""
        s = f"{self.name}"
        if self.index is not None:
            s += f" {self.index}"
        s += "\n"

        for par_name, par_data in self.parameters.items():
            if par_data is None:
                continue
            s += f"  {par_name}"
            if par_data is not None:
                val_str_list = []
                for val in par_data:
                    try:
                        val_str = f"{val:d}"
                    except ValueError:
                        try:
                            val_str = f"{val:.6f}"
                        except ValueError:
                            val_str = str(val)
                    val_str_list.append(val_str)
                if val_str_list:
                    s += ' '
                    s += ' '.join(val_str_list)
            s += "\n"

        s += "end\n"
        return s

    def __init_from_datamodel(self, dm_data):
        for param_name, param_fields in dm_data.items():
            self.param_fields[param_name] = {}
            for field_index, field_data in param_fields.items():
                field_index = int(field_index)
                self.param_fields[param_name][field_index] = field_data

    def get_paramete_values(self, par_name: str) -> list:
        """
        Get the values of the parameter par_name.

        Parameters
        ----------
        par_name : str
            The parameter name.

        Returns
        -------
        fields: list
            The valuers of the parameter
        """
        return self.parameters[par_name]

    def set_parameter_values(self, par_name: str, par_values: list):
        """
        Set the values for a parameter.

        Parameters
        ----------
        par_name : str
            The name of the parameters.
        par_values : list
            A list of values for the parameter.

        Raises
        ------
        ValueError
            This identifier do not have a parameter named par_name.
        IndexError
            The lenght of par_values do no match the number of reuired
            fileds for the parameter par_name.

        Returns
        -------
        None.

        """
        try:
            param_fields = self.param_fields[par_name]
        except KeyError:
            raise ValueError(
                f"Identifier '{self.name}' do not have a parameter "
                f"named '{par_name}'!"
            )

        field_indices = [x for x in param_fields]
        field_indices.sort()

        values = []
        for field_index in field_indices:
            field_dm_data = param_fields[field_index]
            try:
                input_val = par_values[field_index]
            except IndexError as exc:
                if not field_dm_data['required']:
                    continue
                print(f"ERR: {par_name} field index {field_index}")
                raise exc

            input_type = field_dm_data['type'].lower()

            if input_type == 'int':
                new_val = int(input_val)
            elif input_type == 'float':
                new_val = float(input_val)
            else:
                new_val = str(input_val)
            values.append(new_val)
        self.parameters[par_name] = values


class ParametersDataModel:
    """Data Model for parameter file."""

    END_FILE_KEYWORD = 'fini'
    END_FIRST_IDENTIFIED_KEYWORD = 'end'
    COMMENT_START_IDENTIFIER = '#'

    def __init__(self, data_model_file=LENSTOOL_DATAMODEL_DBASE):
        """
        Initialize function.

        Returns
        -------
        None.

        """
        self.identifiers = []
        with open(data_model_file) as f:
            self.__dm = json.load(f)

    def get_identifier_data_model(self, name):
        try:
            return self.__dm[name]
        except KeyError:
            return None

    def __str__(self):
        """Return lesntool par-file text data."""
        s = "#Generated by lenstool minimize\n\n"
        for identifier in self.identifiers:
            s += str(identifier) + '\n'
        s += f"{self.END_FILE_KEYWORD}\n"
        return s

    def get_identifier(self, ident_name: str, ident_index=None):
        """
        Get a list of identifier of type ident_name.

        Parameters
        ----------
        ident_name : str
            The name of the identifier to search for.
        ident_index : str or other hashable type, optional
            The index of the identifier (eg. for a potentiel itentifier named
            "potentiel 01" the ident_index is 1, while for "potentiel K1" the
            ident_index is "K1". If none, no index filtering is applied and
            All the identifiers matching 'ident_name' are returned.
            The default is None.

        Returns
        -------
        id_list : list of LenstoolFirstIdentifier
            A list containing the LenstoolFirstIdentifier objects that match
            with the search criteria.
        """
        id_list = []
        for ident in self.identifiers:
            if ident.name == ident_name:
                if (ident_index is not None) and (ident.index != ident_index):
                    continue
                id_list.append(ident)
        return id_list

    def pop_identifier(self, ident_name: str, ident_index=None):
        """
        Get a list of identifier of type ident_name.

        Same as get_identifier but returned elements are removed from the
        list of first identifiers.

        Parameters
        ----------
        ident_name : str
            The name of the identifier to search for.
        ident_index : str or other hashable type, optional
            The index of the identifier (eg. for a potentiel itentifier named
            "potentiel 01" the ident_index is 1, while for "potentiel K1" the
            ident_index is "K1". If none, no index filtering is applied and
            All the identifiers matching 'ident_name' are returned.
            The default is None.

        Returns
        -------
        id_list : list of LenstoolFirstIdentifier
            A list containing the LenstoolFirstIdentifier objects that match
            with the search criteria.
        """
        id_list = []
        new_idents = []
        for ident in self.identifiers:
            if ident.name == ident_name:
                if (ident_index is not None) and (ident.index != ident_index):
                    new_idents.append(ident)
                    continue
                id_list.append(ident)
            else:
                new_idents.append(ident)
        self.identifiers = new_idents
        return id_list

    def append_identifier(self, ident: LenstoolFirstIdentifier):
        self.identifiers.append(ident)

    def read(self, filename: str, strict: bool = False) -> bool:
        """
        Build the data model from a file.

        Parameters
        ----------
        filename : str
            The input par-file path.
        strict : bool
            warnings are treated as errors.

        Returns
        -------
        status : bool
            True if the input par-file is valid.
        """
        with open(filename, 'r') as f:
            data_lines = f.read().splitlines()

        identifiers = []
        current_first_identifier = None
        update_limits = False
        for j, line in enumerate(data_lines):
            line = line.split(self.COMMENT_START_IDENTIFIER)[0]
            line = line.strip()
            if not line:
                continue

            line_data = line.split()
            if current_first_identifier is None:
                if line_data[0] in self.__dm:
                    try:
                        identifier_index = line_data[1]
                    except IndexError:
                        identifier_index = None

                    current_first_identifier = LenstoolFirstIdentifier(
                        line_data[0],
                        self.get_identifier_data_model(line_data[0]),
                        index=identifier_index
                    )
                elif line_data[0] == self.END_FILE_KEYWORD:
                    break
                else:
                    warnings.warn(
                        f"Missing first identifier on line {j}"
                    )
                    if strict:
                        return False
            elif line_data[0] == self.END_FIRST_IDENTIFIED_KEYWORD:
                identifiers.append(current_first_identifier)
                current_first_identifier = None
            else:
                par_name = line_data[0]
                par_value = line_data[1:]

                if update_limits:
                    pass
                else:
                    current_first_identifier.set_parameter_values(
                        par_name, par_value
                    )
        else:
            warnings.warn(
                "Missing end file keyword on line {j}"
            )
            if strict:
                return False

        has_runmode = False
        for ident in identifiers:
            if ident.name == 'runmode':
                has_runmode = True

        if not has_runmode:
            return False
        else:
            self.identifiers = identifiers
            _ = self.get_reference_skycoord()

        return True

    def get_runmode(self) -> LenstoolFirstIdentifier:
        """
        Get runmode identifier.

        Returns
        -------
        runmode : LenstoolFirstIdentifier
            The rumode identifiers

        """
        return self.get_identifier('runmode')[0]

    def get_reference_skycoord(self) -> SkyCoord:
        """
        Get the reference point.

        Raises
        ------
        ValueError
            DESCRIPTION.

        Returns
        -------
        ref : astropy.coordinates.SkyCoord
            The sky coordinates of the reference point.

        """
        runmode = self.get_runmode()
        mode, ra, dec = runmode.get_paramete_values('reference')
        mode = int(mode)
        if mode == 1:
            unit = [units.hourangle, units.deg]
        elif mode == 3:
            unit = [units.deg, units.deg]
        else:
            raise ValueError("Invalid reference mode {mode}")
        ref = SkyCoord(
            ra, dec,
            unit=unit
        )
        return ref
